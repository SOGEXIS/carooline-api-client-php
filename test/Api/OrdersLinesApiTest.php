<?php
/**
 * OrdersLinesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sale REST services
 *
 * Get or Update Sales
 *
 * OpenAPI spec version: 0.1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Carooline;

use GuzzleHttp\Client;
use Carooline\Configuration;
use Carooline\ApiException;
use Carooline\ObjectSerializer;
use Carooline\Api\AuthApi;
use Carooline\Api\OrdersLinesApi;
use Carooline\Model\LoginRequest;
use Carooline\Model\OrderLineUpdateRequest;
use Carooline\Model\OrderLineCreateRequest;
use Carooline\Model\OrderLineSearchResponse;
use Carooline\Model\OrderLine;

/**
 * OrdersLinesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrdersLinesApiTest extends \PHPUnit\Framework\TestCase
{
    protected static $client;
    protected static $config;
    protected $orderLineApi;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass() : void
    {
        self::$client = new Client();
        self::$config = new Configuration();
        self::$config->setHost($_ENV['api_host']);

        $authApi = new AuthApi(
            self::$client,
            self::$config
        );
        $body = new LoginRequest([
            'login' => $_ENV['api_login'],
            'password' => $_ENV['api_password']
        ]);

        $result = $authApi->authLoginPost($body);
        $token = $result->getToken();
        self::$config->setAccessToken($token);
    }

    /**
     * Setup before running each test case
     */
    protected function setUp() : void
    {
        $this->orderLineApi = new OrdersLinesApi(
            self::$client,
            self::$config
        );
    }

    /**
     * Clean up after running each test case
     */
    protected function tearDown() : void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass() : void
    {
    }


    /**
     * Test case for ordersLinesGet
     *
     * Search Order Lines by Order's Id (Required).
     *
     */
    public function testOrdersLinesGet()
    {
        $result = $this->orderLineApi->ordersLinesGet(71);
        $this->assertInstanceOf(OrderLineSearchResponse::class, $result);
        $this->assertGreaterThanOrEqual(3, $result->getCount());
    }

    /**
     * Test case for ordersLinesIdDelete
     *
     * Delete an Order line.
     *
     */
    public function testOrdersLinesOperations()
    {
        $result = $this->orderLineApi->ordersLinesGet(71);
        $countBefore = $result->getCount();
        
        // CREATE
        $body = new OrderLineCreateRequest([
            'order_id' => 71,
            'product_id' => 74891,
            'quantity' => 3,
            'price_unit' => 45.34,
        ]);
        $result = $this->orderLineApi->ordersLinesCreatePost($body);
        $this->assertInstanceOf(OrderLine::class, $result);
        $this->assertInstanceOf(OrderLine::class, $result);
        $this->assertEquals(3, $result->getQuantity());
        $this->assertEquals(45.34, $result->getPriceUnit());
        $this->assertEquals(71, $result->getOrderId());
        $this->assertEquals(74891, $result->getProductId());
        $newOrderLineId = $result->getId();
        $quantityBefore = $result->getQuantity();
        
        // GET
        $orderLine = $this->orderLineApi->ordersLinesIdGet($newOrderLineId);
        $this->assertEquals($quantityBefore, $orderLine->getQuantity());
        $this->assertEquals(71, $orderLine->getOrderId());
        $this->assertEquals(45.34, $orderLine->getPriceUnit());
        $this->assertEquals(74891, $orderLine->getProductId());

        // PUT
        $bodyUpdate = new OrderLineUpdateRequest([
            'quantity' => 4,
        ]);
        $result = $this->orderLineApi->ordersLinesIdPut($newOrderLineId, $bodyUpdate);
        $this->assertGreaterThan($countBefore, $result->getquantity());

        // DELETE
        $this->orderLineApi->ordersLinesIdDelete($newOrderLineId);
        $result = $this->orderLineApi->ordersLinesGet(71);
        $this->assertEquals($countBefore, $result->getCount());
    }

}
