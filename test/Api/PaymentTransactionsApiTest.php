<?php
/**
 * PaymentTransactionsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sale REST services
 *
 * Get or Update Sales
 *
 * OpenAPI spec version: 0.1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Carooline;

use GuzzleHttp\Client;
use Carooline\Configuration;
use Carooline\ApiException;
use Carooline\ObjectSerializer;
use Carooline\Api\AuthApi;
use Carooline\Api\PaymentTransactionsApi;
use Carooline\Model\LoginRequest;
use Carooline\Model\PaymentTransactionCreateRequest;
use Carooline\Model\PaymentTransactionUpdateRequest;
use Carooline\Model\PaymentTransactionSearchResponse;
use Carooline\Model\PaymentTransaction;
/**
 * PaymentTransactionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentTransactionsApiTest extends \PHPUnit\Framework\TestCase
{
    protected static $client;
    protected static $config;
    protected $paymentTransactionApi;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass() : void
    {
        self::$client = new Client();
        self::$config = new Configuration();
        self::$config->setHost($_ENV['api_host']);

        $authApi = new AuthApi(
            self::$client,
            self::$config
        );
        $body = new LoginRequest([
            'login' => $_ENV['api_login'],
            'password' => $_ENV['api_password']
        ]);

        $result = $authApi->authLoginPost($body);
        $token = $result->getToken();
        self::$config->setAccessToken($token);
    }

    /**
     * Setup before running each test case
     */
    protected function setUp() : void
    {
        $this->paymentTransactionApi = new PaymentTransactionsApi(
            self::$client,
            self::$config
        );
    }


    /**
     * Test case for paymentTransactionsCreatePost
     *
     * Create a new PaymentTransaction..
     *
     */
    public function testPaymentTransactionsCreatePost()
    {
        $orderId = "71";
        $orderName = "DV0088";
        $body = new PaymentTransactionCreateRequest([
            'reference' => $orderName,
            'partner_id' => 31,
            'acquirer' => 'Paybox',
            'amount' => 375.64,
            'acquirer_reference' => "IUAHDKJAHZDKHKQJSD",
        ]);
        $result = $this->paymentTransactionApi->paymentTransactionsCreatePost($body);
        
        $this->assertInstanceOf(\Carooline\Model\PaymentTransaction::class, $result);
        $this->assertEquals('draft', $result->getState());
        
        $transactionId = $result->getId();
        $result = $this->paymentTransactionApi->paymentTransactionsIdDelete($transactionId);
    }

    /**
     * Test case for paymentTransactionsGet
     *
     * Search PaymentTransaction by reference, partner_id or order_id.
     *
     */
    public function testPaymentTransactionsGet()
    {
        $result = $this->paymentTransactionApi->paymentTransactionsGet(null, null, "DV0024");
        $this->assertInstanceOf(PaymentTransactionSearchResponse::class, $result);
        $this->assertEquals(1, $result->getCount());
        foreach ($result->getRows() as $paymentTransaction) {
            $this->assertInstanceOf(\Carooline\Model\PaymentTransaction::class, $paymentTransaction);
            $this->assertStringContainsStringIgnoringCase("DV0024", $paymentTransaction->getReference());
            $this->assertEquals(29, $paymentTransaction->getPartnerId());
        }
    }

    /**
     * Test case for paymentTransactionsIdDelete
     *
     * Delete Payment Transaction.
     *
     */
    public function testPaymentTransactionsIdDelete()
    {
        $orderId = "71";
        $orderName = "DV9988";
        $body = new PaymentTransactionCreateRequest([
            'reference' => $orderName,
            'partner_id' => 31,
            'acquirer' => 'Paybox',
            'amount' => 375.64,
            'acquirer_reference' => "TO_DELETE",
        ]);
        $result = $this->paymentTransactionApi->paymentTransactionsCreatePost($body);
        $this->assertInstanceOf(\Carooline\Model\PaymentTransaction::class, $result);
        $transactionId = $result->getId();

        $result = $this->paymentTransactionApi->paymentTransactionsIdDelete($transactionId);
    }

    /**
     * Test case for paymentTransactionsIdGet
     *
     * Get Payment Transactions.
     *
     */
    public function testPaymentTransactionsIdGet()
    {
        $result = $this->paymentTransactionApi->paymentTransactionsIdGet(8);
        $this->assertInstanceOf(PaymentTransaction::class, $result);
        $this->assertInstanceOf(\Carooline\Model\PaymentTransaction::class, $result);
        $this->assertStringContainsStringIgnoringCase("DV0024", $result->getReference());
        $this->assertEquals(29, $result->getPartnerId());
    }

    /**
     * Test case for paymentTransactionsIdPut
     *
     * Update PaymentTransaction informations.
     *
     */
    public function testPaymentTransactionsIdPut()
    {
        $body = new PaymentTransactionUpdateRequest([
            'state' => 'done'
        ]);
        $result = $this->paymentTransactionApi->paymentTransactionsIdPut(124, $body);
        $this->assertInstanceOf(PaymentTransaction::class, $result);
        $this->assertStringContainsStringIgnoringCase("DV0065-2", $result->getReference());
        $this->assertEquals('done', $result->getState());

        $body = new PaymentTransactionUpdateRequest([
            'state' => 'draft'
        ]);
        $result = $this->paymentTransactionApi->paymentTransactionsIdPut(124, $body);
        $this->assertInstanceOf(PaymentTransaction::class, $result);
        $this->assertStringContainsStringIgnoringCase("DV0065-2", $result->getReference());
        $this->assertEquals('draft', $result->getState());
    }
}
