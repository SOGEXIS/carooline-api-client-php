<?php
/**
 * ProductsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * catalog REST services
 *
 * Get or Update Catalog
 *
 * OpenAPI spec version: 0.0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Carooline;

use GuzzleHttp\Client;
use Carooline\Configuration;
use Carooline\ApiException;
use Carooline\ObjectSerializer;
use Carooline\Api\AuthApi;
use Carooline\Api\ProductsApi;
use Carooline\Model\LoginRequest;
use Carooline\Model\GetAllAvailabilitiesResponse;
use Carooline\Model\GetAllAvailabilitiesRequest;
use Carooline\Model\ProductUpdateRequest;
use Carooline\Model\SearchProductsForVehicleAndCategoryRequest;
use Carooline\Model\OmniSearchProductsRequest;

/**
 * ProductsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsApiTest extends \PHPUnit\Framework\TestCase
{

    protected static $client;
    protected static $config;
    protected $productApi;
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass() : void
    {
        self::$client = new Client();
        self::$config = new Configuration();
        self::$config->setHost($_ENV['api_host']);

        $authApi = new AuthApi(
            self::$client,
            self::$config
        );
        $body = new LoginRequest([
            'login' => $_ENV['api_login'],
            'password' => $_ENV['api_password']
        ]);

        $result = $authApi->authLoginPost($body);
        $token = $result->getToken();
        self::$config->setAccessToken($token);
    }

    /**
     * Setup before running each test case
     */
    protected function setUp() : void
    {
        $this->productApi = new ProductsApi(
            self::$client,
            self::$config
        );
    }

    /**
     * Clean up after running each test case
     */
    protected function tearDown() : void
    {
    }

    /**
     * Test case for productsGet
     *
     * Search Product by ref / brand.
     *
     */
    public function testProductsGet()
    {
        // productsGet($categ_id = null, $manufacturer_id = null, $name = null, $ref = null)
        $result = $this->productApi->productsGet(null, null, null, "1 457 433 526");
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertGreaterThanOrEqual(1, $result->getCount());
        foreach ($result->getRows() as $product) {
            $this->assertInstanceOf(\Carooline\Model\Product::class, $product);
            $this->assertStringContainsStringIgnoringCase("Filtre à air", $product->getName());
        }
    }

    /**
     * Test case for productsGetAllAvailabilitiesPost
     *
     * .
     *
     */
    public function testProductsGetAllAvailabilitiesPost()
    {
        $body = new GetAllAvailabilitiesRequest([
            'product_ids' => [74891, 73114]
        ]);
        $result = $this->productApi->productsGetAllAvailabilitiesPost($body);
        $this->assertInstanceOf(GetAllAvailabilitiesResponse::class, $result);
        $this->assertGreaterThanOrEqual(1, count($result->getAvailabilities()));
        foreach ($result->getAvailabilities() as $availability) {
            $this->assertIsInt($availability->getProductId());
            if ($availability->getProductId() == 74891) {
                foreach ($availability->getStockLocations() as $stockLocations) {
                    $this->assertGreaterThanOrEqual(200, $stockLocations->getQuantity());
                    $this->assertEquals("BAKELIT", $stockLocations->getCompanyName());
                    $this->assertEquals(1, $stockLocations->getCompanyId());
                }
            }
        }
    }

    /**
     * Test case for productsIdGet
     *
     * Get Products's informations.
     *
     */
    public function testProductsIdGet()
    {
        $result = $this->productApi->productsIdGet(74891);
        $this->assertInstanceOf(\Carooline\Model\Product::class, $result);
        $this->assertEquals(74891, $result->getId());
        $this->assertEquals("Filtre à air", $result->getName());
        $this->assertEquals("BOSCH", $result->getManufacturer()->getName());
    }

    /**
     * Test case for productsIdPut
     *
     * Update product informations.
     *
     */
    public function testProductsIdPut()
    {
        $body = new ProductUpdateRequest(['list_price' => 32.80]);
        $result = $this->productApi->productsIdPut(74891, $body);
        $this->assertInstanceOf(\Carooline\Model\Product::class, $result);
        $this->assertEquals(74891, $result->getId());
        $this->assertEquals(32.80, $result->getListPrice());
        
        $body = new ProductUpdateRequest(['list_price' => 30.80]);
        $result = $this->productApi->productsIdPut(74891, $body);
        $this->assertInstanceOf(\Carooline\Model\Product::class, $result);
        $this->assertEquals(74891, $result->getId());
        $this->assertEquals(30.80, $result->getListPrice());
    }
    
    /**
     * Test case for productsOmnisearchPost
     *
     * Get Products for a search term. Search term can be a Ref or Product name. If a vehicle_qery is set, all the results will be compatible with it.
     *
     */
    public function testProductsOmnisearchPost()
    {
        // 3878 plaquette de frein
        // type_id PEUGEOT 206: 13558
        // k_type PEUGEOT 206: '30091'
        // Search ref TEXTAR 2359703
        // Brand MINTEXT id = 142
        $body = new OmniSearchProductsRequest([
            'vehicle_query' => '13558',
            'search_query' => '2359703'
        ]);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertGreaterThanOrEqual(2, $result->getCount());
        
        //only One HELLA product (manufacturer_id = 76)
        $body->setManufacturerId(142);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertEquals(1, $result->getCount());
        
        $body = new OmniSearchProductsRequest([
            'vehicle_query' => '13558',
            'search_query' => 'disque de frein'
        ]);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertGreaterThanOrEqual(10, $result->getCount());
        
        // Categ id : 3875 Disques
        $body->setCategId(3875);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertEquals(7, $result->getCount());
        
        // Only HELLA product (manufacturer_id = 76)
        $body->setManufacturerId(76);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertEquals(1, $result->getCount());
        
        
        // Ref of a HELLA product with one equivalence 8DZ 355 209-121
        // No vehicle selected
        $body = new OmniSearchProductsRequest([
            'search_query' => '8DZ 355 209-121'
        ]);
        $result = $this->productApi->productsOmnisearchPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertEquals(2, $result->getCount());
    }


    /**
     * Test case for productsGetForVehicleAndCategoryPost
     *
     * Get Products for a given Category and selected Vehicle type id or ktype.
     *
     */
    public function testProductsGetForVehicleAndCategoryPost()
    {
        // 3878 plaquette de frein
        // type_id PEUGEOT 206: 13558
        // k_type PEUGEOT 206: '30091'
        $body = new SearchProductsForVehicleAndCategoryRequest([
            'vehicle_query' => '30091',
            'vehicle_query_type' => 'k_type',
            'categ_id' => 3878
        ]);
        $result = $this->productApi->productsGetForVehicleAndCategoryPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertGreaterThanOrEqual(5, $result->getCount());
        
        //only One HELLA product (manufacturer_id = 76)
        $body->setManufacturerId(76);
        $result = $this->productApi->productsGetForVehicleAndCategoryPost($body);
        $this->assertInstanceOf(\Carooline\Model\ProductSearchResponse::class, $result);
        $this->assertEquals(1, $result->getCount());
    }

}
