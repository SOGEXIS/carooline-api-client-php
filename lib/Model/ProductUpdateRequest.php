<?php
/**
 * ProductUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * catalog REST services
 *
 * Get or Update Catalog
 *
 * OpenAPI spec version: 0.0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Carooline\Model;

use \ArrayAccess;
use \Carooline\ObjectSerializer;

/**
 * ProductUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list_price' => 'float',
'tire_width' => 'string',
'tire_is_runflat' => 'bool',
'default_code' => 'string',
'tire_diameter' => 'string',
'sale_ok' => 'bool',
'is_tire' => 'bool',
'tire_height' => 'string',
'tire_speed' => 'string',
'type' => 'string',
'tire_load' => 'string',
'categ' => '\Carooline\Model\ProductCateg',
'consigne_price' => 'float',
'tire_scale' => 'string',
'tire_eu_db' => 'string',
'full_picture_url' => 'string',
'active' => 'bool',
'tire_eu_adherence_id' => 'string',
'short_codes' => 'string',
'manufacturer' => '\Carooline\Model\ProductManufacturer',
'name' => 'string',
'tire_is_reinforced' => 'bool',
'tire_type' => 'string',
'tire_eu_eco' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list_price' => 'float',
'tire_width' => null,
'tire_is_runflat' => null,
'default_code' => null,
'tire_diameter' => null,
'sale_ok' => null,
'is_tire' => null,
'tire_height' => null,
'tire_speed' => null,
'type' => null,
'tire_load' => null,
'categ' => null,
'consigne_price' => 'float',
'tire_scale' => null,
'tire_eu_db' => null,
'full_picture_url' => null,
'active' => null,
'tire_eu_adherence_id' => null,
'short_codes' => null,
'manufacturer' => null,
'name' => null,
'tire_is_reinforced' => null,
'tire_type' => null,
'tire_eu_eco' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_price' => 'list_price',
'tire_width' => 'tire_width',
'tire_is_runflat' => 'tire_is_runflat',
'default_code' => 'default_code',
'tire_diameter' => 'tire_diameter',
'sale_ok' => 'sale_ok',
'is_tire' => 'is_tire',
'tire_height' => 'tire_height',
'tire_speed' => 'tire_speed',
'type' => 'type',
'tire_load' => 'tire_load',
'categ' => 'categ',
'consigne_price' => 'consigne_price',
'tire_scale' => 'tire_scale',
'tire_eu_db' => 'tire_eu_db',
'full_picture_url' => 'full_picture_url',
'active' => 'active',
'tire_eu_adherence_id' => 'tire_eu_adherence_id',
'short_codes' => 'short_codes',
'manufacturer' => 'manufacturer',
'name' => 'name',
'tire_is_reinforced' => 'tire_is_reinforced',
'tire_type' => 'tire_type',
'tire_eu_eco' => 'tire_eu_eco'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_price' => 'setListPrice',
'tire_width' => 'setTireWidth',
'tire_is_runflat' => 'setTireIsRunflat',
'default_code' => 'setDefaultCode',
'tire_diameter' => 'setTireDiameter',
'sale_ok' => 'setSaleOk',
'is_tire' => 'setIsTire',
'tire_height' => 'setTireHeight',
'tire_speed' => 'setTireSpeed',
'type' => 'setType',
'tire_load' => 'setTireLoad',
'categ' => 'setCateg',
'consigne_price' => 'setConsignePrice',
'tire_scale' => 'setTireScale',
'tire_eu_db' => 'setTireEuDb',
'full_picture_url' => 'setFullPictureUrl',
'active' => 'setActive',
'tire_eu_adherence_id' => 'setTireEuAdherenceId',
'short_codes' => 'setShortCodes',
'manufacturer' => 'setManufacturer',
'name' => 'setName',
'tire_is_reinforced' => 'setTireIsReinforced',
'tire_type' => 'setTireType',
'tire_eu_eco' => 'setTireEuEco'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_price' => 'getListPrice',
'tire_width' => 'getTireWidth',
'tire_is_runflat' => 'getTireIsRunflat',
'default_code' => 'getDefaultCode',
'tire_diameter' => 'getTireDiameter',
'sale_ok' => 'getSaleOk',
'is_tire' => 'getIsTire',
'tire_height' => 'getTireHeight',
'tire_speed' => 'getTireSpeed',
'type' => 'getType',
'tire_load' => 'getTireLoad',
'categ' => 'getCateg',
'consigne_price' => 'getConsignePrice',
'tire_scale' => 'getTireScale',
'tire_eu_db' => 'getTireEuDb',
'full_picture_url' => 'getFullPictureUrl',
'active' => 'getActive',
'tire_eu_adherence_id' => 'getTireEuAdherenceId',
'short_codes' => 'getShortCodes',
'manufacturer' => 'getManufacturer',
'name' => 'getName',
'tire_is_reinforced' => 'getTireIsReinforced',
'tire_type' => 'getTireType',
'tire_eu_eco' => 'getTireEuEco'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['tire_width'] = isset($data['tire_width']) ? $data['tire_width'] : null;
        $this->container['tire_is_runflat'] = isset($data['tire_is_runflat']) ? $data['tire_is_runflat'] : null;
        $this->container['default_code'] = isset($data['default_code']) ? $data['default_code'] : null;
        $this->container['tire_diameter'] = isset($data['tire_diameter']) ? $data['tire_diameter'] : null;
        $this->container['sale_ok'] = isset($data['sale_ok']) ? $data['sale_ok'] : null;
        $this->container['is_tire'] = isset($data['is_tire']) ? $data['is_tire'] : null;
        $this->container['tire_height'] = isset($data['tire_height']) ? $data['tire_height'] : null;
        $this->container['tire_speed'] = isset($data['tire_speed']) ? $data['tire_speed'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['tire_load'] = isset($data['tire_load']) ? $data['tire_load'] : null;
        $this->container['categ'] = isset($data['categ']) ? $data['categ'] : null;
        $this->container['consigne_price'] = isset($data['consigne_price']) ? $data['consigne_price'] : null;
        $this->container['tire_scale'] = isset($data['tire_scale']) ? $data['tire_scale'] : null;
        $this->container['tire_eu_db'] = isset($data['tire_eu_db']) ? $data['tire_eu_db'] : null;
        $this->container['full_picture_url'] = isset($data['full_picture_url']) ? $data['full_picture_url'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['tire_eu_adherence_id'] = isset($data['tire_eu_adherence_id']) ? $data['tire_eu_adherence_id'] : null;
        $this->container['short_codes'] = isset($data['short_codes']) ? $data['short_codes'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tire_is_reinforced'] = isset($data['tire_is_reinforced']) ? $data['tire_is_reinforced'] : null;
        $this->container['tire_type'] = isset($data['tire_type']) ? $data['tire_type'] : null;
        $this->container['tire_eu_eco'] = isset($data['tire_eu_eco']) ? $data['tire_eu_eco'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets list_price
     *
     * @return float
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param float $list_price list_price
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets tire_width
     *
     * @return string
     */
    public function getTireWidth()
    {
        return $this->container['tire_width'];
    }

    /**
     * Sets tire_width
     *
     * @param string $tire_width tire_width
     *
     * @return $this
     */
    public function setTireWidth($tire_width)
    {
        $this->container['tire_width'] = $tire_width;

        return $this;
    }

    /**
     * Gets tire_is_runflat
     *
     * @return bool
     */
    public function getTireIsRunflat()
    {
        return $this->container['tire_is_runflat'];
    }

    /**
     * Sets tire_is_runflat
     *
     * @param bool $tire_is_runflat tire_is_runflat
     *
     * @return $this
     */
    public function setTireIsRunflat($tire_is_runflat)
    {
        $this->container['tire_is_runflat'] = $tire_is_runflat;

        return $this;
    }

    /**
     * Gets default_code
     *
     * @return string
     */
    public function getDefaultCode()
    {
        return $this->container['default_code'];
    }

    /**
     * Sets default_code
     *
     * @param string $default_code default_code
     *
     * @return $this
     */
    public function setDefaultCode($default_code)
    {
        $this->container['default_code'] = $default_code;

        return $this;
    }

    /**
     * Gets tire_diameter
     *
     * @return string
     */
    public function getTireDiameter()
    {
        return $this->container['tire_diameter'];
    }

    /**
     * Sets tire_diameter
     *
     * @param string $tire_diameter tire_diameter
     *
     * @return $this
     */
    public function setTireDiameter($tire_diameter)
    {
        $this->container['tire_diameter'] = $tire_diameter;

        return $this;
    }

    /**
     * Gets sale_ok
     *
     * @return bool
     */
    public function getSaleOk()
    {
        return $this->container['sale_ok'];
    }

    /**
     * Sets sale_ok
     *
     * @param bool $sale_ok sale_ok
     *
     * @return $this
     */
    public function setSaleOk($sale_ok)
    {
        $this->container['sale_ok'] = $sale_ok;

        return $this;
    }

    /**
     * Gets is_tire
     *
     * @return bool
     */
    public function getIsTire()
    {
        return $this->container['is_tire'];
    }

    /**
     * Sets is_tire
     *
     * @param bool $is_tire is_tire
     *
     * @return $this
     */
    public function setIsTire($is_tire)
    {
        $this->container['is_tire'] = $is_tire;

        return $this;
    }

    /**
     * Gets tire_height
     *
     * @return string
     */
    public function getTireHeight()
    {
        return $this->container['tire_height'];
    }

    /**
     * Sets tire_height
     *
     * @param string $tire_height tire_height
     *
     * @return $this
     */
    public function setTireHeight($tire_height)
    {
        $this->container['tire_height'] = $tire_height;

        return $this;
    }

    /**
     * Gets tire_speed
     *
     * @return string
     */
    public function getTireSpeed()
    {
        return $this->container['tire_speed'];
    }

    /**
     * Sets tire_speed
     *
     * @param string $tire_speed tire_speed
     *
     * @return $this
     */
    public function setTireSpeed($tire_speed)
    {
        $this->container['tire_speed'] = $tire_speed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets tire_load
     *
     * @return string
     */
    public function getTireLoad()
    {
        return $this->container['tire_load'];
    }

    /**
     * Sets tire_load
     *
     * @param string $tire_load tire_load
     *
     * @return $this
     */
    public function setTireLoad($tire_load)
    {
        $this->container['tire_load'] = $tire_load;

        return $this;
    }

    /**
     * Gets categ
     *
     * @return \Carooline\Model\ProductCateg
     */
    public function getCateg()
    {
        return $this->container['categ'];
    }

    /**
     * Sets categ
     *
     * @param \Carooline\Model\ProductCateg $categ categ
     *
     * @return $this
     */
    public function setCateg($categ)
    {
        $this->container['categ'] = $categ;

        return $this;
    }

    /**
     * Gets consigne_price
     *
     * @return float
     */
    public function getConsignePrice()
    {
        return $this->container['consigne_price'];
    }

    /**
     * Sets consigne_price
     *
     * @param float $consigne_price consigne_price
     *
     * @return $this
     */
    public function setConsignePrice($consigne_price)
    {
        $this->container['consigne_price'] = $consigne_price;

        return $this;
    }

    /**
     * Gets tire_scale
     *
     * @return string
     */
    public function getTireScale()
    {
        return $this->container['tire_scale'];
    }

    /**
     * Sets tire_scale
     *
     * @param string $tire_scale tire_scale
     *
     * @return $this
     */
    public function setTireScale($tire_scale)
    {
        $this->container['tire_scale'] = $tire_scale;

        return $this;
    }

    /**
     * Gets tire_eu_db
     *
     * @return string
     */
    public function getTireEuDb()
    {
        return $this->container['tire_eu_db'];
    }

    /**
     * Sets tire_eu_db
     *
     * @param string $tire_eu_db tire_eu_db
     *
     * @return $this
     */
    public function setTireEuDb($tire_eu_db)
    {
        $this->container['tire_eu_db'] = $tire_eu_db;

        return $this;
    }

    /**
     * Gets full_picture_url
     *
     * @return string
     */
    public function getFullPictureUrl()
    {
        return $this->container['full_picture_url'];
    }

    /**
     * Sets full_picture_url
     *
     * @param string $full_picture_url full_picture_url
     *
     * @return $this
     */
    public function setFullPictureUrl($full_picture_url)
    {
        $this->container['full_picture_url'] = $full_picture_url;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets tire_eu_adherence_id
     *
     * @return string
     */
    public function getTireEuAdherenceId()
    {
        return $this->container['tire_eu_adherence_id'];
    }

    /**
     * Sets tire_eu_adherence_id
     *
     * @param string $tire_eu_adherence_id tire_eu_adherence_id
     *
     * @return $this
     */
    public function setTireEuAdherenceId($tire_eu_adherence_id)
    {
        $this->container['tire_eu_adherence_id'] = $tire_eu_adherence_id;

        return $this;
    }

    /**
     * Gets short_codes
     *
     * @return string
     */
    public function getShortCodes()
    {
        return $this->container['short_codes'];
    }

    /**
     * Sets short_codes
     *
     * @param string $short_codes short_codes
     *
     * @return $this
     */
    public function setShortCodes($short_codes)
    {
        $this->container['short_codes'] = $short_codes;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return \Carooline\Model\ProductManufacturer
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \Carooline\Model\ProductManufacturer $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tire_is_reinforced
     *
     * @return bool
     */
    public function getTireIsReinforced()
    {
        return $this->container['tire_is_reinforced'];
    }

    /**
     * Sets tire_is_reinforced
     *
     * @param bool $tire_is_reinforced tire_is_reinforced
     *
     * @return $this
     */
    public function setTireIsReinforced($tire_is_reinforced)
    {
        $this->container['tire_is_reinforced'] = $tire_is_reinforced;

        return $this;
    }

    /**
     * Gets tire_type
     *
     * @return string
     */
    public function getTireType()
    {
        return $this->container['tire_type'];
    }

    /**
     * Sets tire_type
     *
     * @param string $tire_type tire_type
     *
     * @return $this
     */
    public function setTireType($tire_type)
    {
        $this->container['tire_type'] = $tire_type;

        return $this;
    }

    /**
     * Gets tire_eu_eco
     *
     * @return string
     */
    public function getTireEuEco()
    {
        return $this->container['tire_eu_eco'];
    }

    /**
     * Sets tire_eu_eco
     *
     * @param string $tire_eu_eco tire_eu_eco
     *
     * @return $this
     */
    public function setTireEuEco($tire_eu_eco)
    {
        $this->container['tire_eu_eco'] = $tire_eu_eco;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
