<?php
/**
 * SearchProductsForVehicleAndCategoryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * catalog REST services
 *
 * Get or Update Catalog
 *
 * OpenAPI spec version: 0.0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Carooline\Model;

use \ArrayAccess;
use \Carooline\ObjectSerializer;

/**
 * SearchProductsForVehicleAndCategoryRequest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchProductsForVehicleAndCategoryRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchProductsForVehicleAndCategoryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_not_tecdoc_products' => 'bool',
'categ_id' => 'int',
'manufacturer_id' => 'int',
'vehicle_query' => 'string',
'vehicle_query_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'add_not_tecdoc_products' => null,
'categ_id' => null,
'manufacturer_id' => null,
'vehicle_query' => null,
'vehicle_query_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_not_tecdoc_products' => 'add_not_tecdoc_products',
'categ_id' => 'categ_id',
'manufacturer_id' => 'manufacturer_id',
'vehicle_query' => 'vehicle_query',
'vehicle_query_type' => 'vehicle_query_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_not_tecdoc_products' => 'setAddNotTecdocProducts',
'categ_id' => 'setCategId',
'manufacturer_id' => 'setManufacturerId',
'vehicle_query' => 'setVehicleQuery',
'vehicle_query_type' => 'setVehicleQueryType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_not_tecdoc_products' => 'getAddNotTecdocProducts',
'categ_id' => 'getCategId',
'manufacturer_id' => 'getManufacturerId',
'vehicle_query' => 'getVehicleQuery',
'vehicle_query_type' => 'getVehicleQueryType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VEHICLE_QUERY_TYPE_CAROOLINE_TYPE_ID = 'carooline_type_id';
const VEHICLE_QUERY_TYPE_K_TYPE = 'k_type';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVehicleQueryTypeAllowableValues()
    {
        return [
            self::VEHICLE_QUERY_TYPE_CAROOLINE_TYPE_ID,
self::VEHICLE_QUERY_TYPE_K_TYPE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_not_tecdoc_products'] = isset($data['add_not_tecdoc_products']) ? $data['add_not_tecdoc_products'] : false;
        $this->container['categ_id'] = isset($data['categ_id']) ? $data['categ_id'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['vehicle_query'] = isset($data['vehicle_query']) ? $data['vehicle_query'] : null;
        $this->container['vehicle_query_type'] = isset($data['vehicle_query_type']) ? $data['vehicle_query_type'] : 'carooline_type_id';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['categ_id'] === null) {
            $invalidProperties[] = "'categ_id' can't be null";
        }
        if ($this->container['vehicle_query'] === null) {
            $invalidProperties[] = "'vehicle_query' can't be null";
        }
        if ($this->container['vehicle_query_type'] === null) {
            $invalidProperties[] = "'vehicle_query_type' can't be null";
        }
        $allowedValues = $this->getVehicleQueryTypeAllowableValues();
        if (!is_null($this->container['vehicle_query_type']) && !in_array($this->container['vehicle_query_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vehicle_query_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_not_tecdoc_products
     *
     * @return bool
     */
    public function getAddNotTecdocProducts()
    {
        return $this->container['add_not_tecdoc_products'];
    }

    /**
     * Sets add_not_tecdoc_products
     *
     * @param bool $add_not_tecdoc_products add_not_tecdoc_products
     *
     * @return $this
     */
    public function setAddNotTecdocProducts($add_not_tecdoc_products)
    {
        $this->container['add_not_tecdoc_products'] = $add_not_tecdoc_products;

        return $this;
    }

    /**
     * Gets categ_id
     *
     * @return int
     */
    public function getCategId()
    {
        return $this->container['categ_id'];
    }

    /**
     * Sets categ_id
     *
     * @param int $categ_id categ_id
     *
     * @return $this
     */
    public function setCategId($categ_id)
    {
        $this->container['categ_id'] = $categ_id;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return int
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param int $manufacturer_id manufacturer_id
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets vehicle_query
     *
     * @return string
     */
    public function getVehicleQuery()
    {
        return $this->container['vehicle_query'];
    }

    /**
     * Sets vehicle_query
     *
     * @param string $vehicle_query vehicle_query
     *
     * @return $this
     */
    public function setVehicleQuery($vehicle_query)
    {
        $this->container['vehicle_query'] = $vehicle_query;

        return $this;
    }

    /**
     * Gets vehicle_query_type
     *
     * @return string
     */
    public function getVehicleQueryType()
    {
        return $this->container['vehicle_query_type'];
    }

    /**
     * Sets vehicle_query_type
     *
     * @param string $vehicle_query_type vehicle_query_type
     *
     * @return $this
     */
    public function setVehicleQueryType($vehicle_query_type)
    {
        $allowedValues = $this->getVehicleQueryTypeAllowableValues();
        if (!in_array($vehicle_query_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vehicle_query_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vehicle_query_type'] = $vehicle_query_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
