<?php
/**
 * OrderCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sale REST services
 *
 * Get or Update Sales
 *
 * OpenAPI spec version: 0.1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Carooline\Model;

use \ArrayAccess;
use \Carooline\ObjectSerializer;

/**
 * OrderCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Carooline
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderCreateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_line' => '\Carooline\Model\OrderCreateRequestOrderLine[]',
'mobile' => 'string',
'carrier' => '\Carooline\Model\OrderCarrier',
'payment_transaction' => '\Carooline\Model\OrderPaymentTransaction',
'client_order_ref' => 'string',
'partner' => '\Carooline\Model\Partner',
'date_order' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_line' => null,
'mobile' => null,
'carrier' => null,
'payment_transaction' => null,
'client_order_ref' => null,
'partner' => null,
'date_order' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_line' => 'order_line',
'mobile' => 'mobile',
'carrier' => 'carrier',
'payment_transaction' => 'payment_transaction',
'client_order_ref' => 'client_order_ref',
'partner' => 'partner',
'date_order' => 'date_order'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_line' => 'setOrderLine',
'mobile' => 'setMobile',
'carrier' => 'setCarrier',
'payment_transaction' => 'setPaymentTransaction',
'client_order_ref' => 'setClientOrderRef',
'partner' => 'setPartner',
'date_order' => 'setDateOrder'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_line' => 'getOrderLine',
'mobile' => 'getMobile',
'carrier' => 'getCarrier',
'payment_transaction' => 'getPaymentTransaction',
'client_order_ref' => 'getClientOrderRef',
'partner' => 'getPartner',
'date_order' => 'getDateOrder'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_line'] = isset($data['order_line']) ? $data['order_line'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['payment_transaction'] = isset($data['payment_transaction']) ? $data['payment_transaction'] : null;
        $this->container['client_order_ref'] = isset($data['client_order_ref']) ? $data['client_order_ref'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['date_order'] = isset($data['date_order']) ? $data['date_order'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['partner'] === null) {
            $invalidProperties[] = "'partner' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_line
     *
     * @return \Carooline\Model\OrderCreateRequestOrderLine[]
     */
    public function getOrderLine()
    {
        return $this->container['order_line'];
    }

    /**
     * Sets order_line
     *
     * @param \Carooline\Model\OrderCreateRequestOrderLine[] $order_line order_line
     *
     * @return $this
     */
    public function setOrderLine($order_line)
    {
        $this->container['order_line'] = $order_line;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \Carooline\Model\OrderCarrier
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \Carooline\Model\OrderCarrier $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets payment_transaction
     *
     * @return \Carooline\Model\OrderPaymentTransaction
     */
    public function getPaymentTransaction()
    {
        return $this->container['payment_transaction'];
    }

    /**
     * Sets payment_transaction
     *
     * @param \Carooline\Model\OrderPaymentTransaction $payment_transaction payment_transaction
     *
     * @return $this
     */
    public function setPaymentTransaction($payment_transaction)
    {
        $this->container['payment_transaction'] = $payment_transaction;

        return $this;
    }

    /**
     * Gets client_order_ref
     *
     * @return string
     */
    public function getClientOrderRef()
    {
        return $this->container['client_order_ref'];
    }

    /**
     * Sets client_order_ref
     *
     * @param string $client_order_ref client_order_ref
     *
     * @return $this
     */
    public function setClientOrderRef($client_order_ref)
    {
        $this->container['client_order_ref'] = $client_order_ref;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return \Carooline\Model\Partner
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param \Carooline\Model\Partner $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets date_order
     *
     * @return string
     */
    public function getDateOrder()
    {
        return $this->container['date_order'];
    }

    /**
     * Sets date_order
     *
     * @param string $date_order date_order
     *
     * @return $this
     */
    public function setDateOrder($date_order)
    {
        $this->container['date_order'] = $date_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
